#!/usr/bin/env node

import { OAuth2Client } from "google-auth-library";
import express from "express";
import { promises as fs } from "fs";
import open from "open";
import { getCredentialsPath, getConfigPath } from "./utils/paths.js";
import { GoogleUserInfo } from "./types/common.js";

// Google OAuth2 configuration
const REDIRECT_URI = "http://localhost:3000/callback";
const SCOPES = [
  "https://www.googleapis.com/auth/tagmanager.readonly",
  "https://www.googleapis.com/auth/tagmanager.edit.containers",
  "https://www.googleapis.com/auth/userinfo.profile",
  "https://www.googleapis.com/auth/userinfo.email"
];

interface GTMConfig {
  credentials: {
    access_token: string;
    refresh_token: string;
    client_id: string;
    client_secret: string;
    expiry_date?: number;
  };
  user: {
    userId: string;
    name: string;
    email: string;
  };
}

interface GoogleCredentials {
  web?: {
    client_id: string;
    client_secret: string;
    redirect_uris?: string[];
  };
  installed?: {
    client_id: string;
    client_secret: string;
    redirect_uris?: string[];
  };
}

async function loadCredentials(): Promise<{ client_id: string; client_secret: string }> {
  try {
    const credentialsPath = getCredentialsPath();
    const credentialsFile = await fs.readFile(credentialsPath, "utf-8");
    const credentials: GoogleCredentials = JSON.parse(credentialsFile);
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: web –∏ installed
    const creds = credentials.web || credentials.installed;
    
    if (!creds || !creds.client_id || !creds.client_secret) {
      throw new Error("Invalid credentials format");
    }
    
    return {
      client_id: creds.client_id,
      client_secret: creds.client_secret,
    };
  } catch {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª credentials.json –∏–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!");
    console.error("");
    console.error("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é credentials.json:");
    console.error("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://console.cloud.google.com/");
    console.error("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π");
    console.error("3. –í–∫–ª—é—á–∏—Ç–µ Google Tag Manager API");
    console.error("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ APIs & Services > Credentials");
    console.error("5. –ù–∞–∂–º–∏—Ç–µ 'Create Credentials' > 'OAuth 2.0 Client ID'");
    console.error("6. –í—ã–±–µ—Ä–∏—Ç–µ 'Web application'");
    console.error("7. –î–æ–±–∞–≤—å—Ç–µ http://localhost:3000/callback –≤ Authorized redirect URIs");
    console.error("8. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ Download JSON");
    console.error("9. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ credentials.json –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞");
    console.error("");
    console.error("üí° –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: /Users/wiefix/WORK/gtm-mcp-server/credentials.json");
    process.exit(1);
  }
}

async function startAuthFlow(): Promise<void> {
  console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º credentials.json...");
  const { client_id, client_secret } = await loadCredentials();
  
  console.log("‚úÖ Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
  console.log(`üîë Client ID: ${client_id.substring(0, 20)}...`);
  
  const app = express();
  const server = app.listen(3000);

  console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Tag Manager...");

  // Create OAuth2 client
  const oauth2Client = new OAuth2Client(
    client_id,
    client_secret,
    REDIRECT_URI
  );

  // Generate authorization URL
  const authUrl = oauth2Client.generateAuthUrl({
    access_type: "offline",
    scope: SCOPES,
    prompt: "consent",
  });

  console.log("üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
  console.log("üåê –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:", authUrl);

  // Handle the callback
  app.get("/callback", async (req, res) => {
    const { code, error } = req.query;

    if (error) {
      res.send(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`);
      server.close();
      process.exit(1);
    }

    if (!code) {
      res.send("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω");
      server.close();
      process.exit(1);
    }

    try {
      console.log("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã...");
      
      // Exchange code for tokens
      const { tokens } = await oauth2Client.getToken(code as string);

      if (!tokens.access_token || !tokens.refresh_token) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã");
      }

      console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã!");

      // Set credentials to get user info
      oauth2Client.setCredentials(tokens);

      console.log("üë§ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...");
      // Get user info
      const userInfoResponse = await oauth2Client.request({
        url: "https://www.googleapis.com/oauth2/v2/userinfo",
      });

      const userData = userInfoResponse.data as GoogleUserInfo;

      // Save configuration
      const config: GTMConfig = {
        credentials: {
          access_token: tokens.access_token,
          refresh_token: tokens.refresh_token,
          client_id: client_id,
          client_secret: client_secret,
          expiry_date: tokens.expiry_date || undefined,
        },
        user: {
          userId: userData.id,
          name: userData.name,
          email: userData.email,
        },
      };

      const configPath = getConfigPath();
      await fs.writeFile(configPath, JSON.stringify(config, null, 2));

      res.send(`
        <html>
          <head>
            <meta charset="UTF-8">
            <title>GTM MCP Server - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</title>
          </head>
          <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial; text-align: center; padding: 50px; background: #f5f5f5;">
            <div style="background: white; padding: 40px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 500px; margin: 0 auto;">
              <h1 style="color: #28a745; margin-bottom: 20px;">‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1>
              <p style="font-size: 18px; margin-bottom: 10px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <strong>${userData.name}</strong></p>
              <p style="color: #666; margin-bottom: 30px;">${userData.email}</p>
              <p style="color: #28a745; font-weight: bold;">üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GTM MCP Server!</p>
              <p style="color: #666; font-size: 14px; margin-top: 20px;">–≠—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.</p>
            </div>
            <script>setTimeout(() => window.close(), 5000);</script>
          </body>
        </html>
      `);

      console.log("");
      console.log("üéâ ====== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ======");
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name}`);
      console.log(`üìß Email: ${userData.email}`);
      console.log(`üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: gtm-config.json`);
      console.log("");
      console.log("‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GTM MCP Server –≤ Claude!");
      console.log("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ Claude Desktop, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ.");

      setTimeout(() => {
        server.close();
        process.exit(0);
      }, 2000);
      
    } catch (authError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", authError);
      res.send(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authError}`);
      server.close();
      process.exit(1);
    }
  });

  // Health check endpoint
  app.get("/", (req, res) => {
    res.send(`
      <html>
        <head><title>GTM MCP Server - Auth Server</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
          <h1>üîÑ GTM MCP Server Authorization</h1>
          <p>–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω...</p>
          <p>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.</p>
        </body>
      </html>
    `);
  });

  // Open browser
  try {
    await open(authUrl);
  } catch {
    console.log("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä.");
    console.log("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤—Ä—É—á–Ω—É—é.");
  }
}

startAuthFlow().catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
  process.exit(1);
});